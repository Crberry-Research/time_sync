# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import json
import logging
import os
import socket
import sys
import typing
from datetime import datetime, timedelta
from enum import Enum
from logging.handlers import RotatingFileHandler
from threading import Event, Thread

import qdarktheme
from PyQt5 import QtCore, QtGui, QtWidgets

DIRECTORY_PATH = os.path.join(os.environ["USERPROFILE"], "crb_time_sync")
CONFIG_PATH = os.path.join(DIRECTORY_PATH, "config.json")
LOG_PATH = os.path.join(DIRECTORY_PATH, "log.log")

if not os.path.exists(DIRECTORY_PATH):
    os.mkdir(DIRECTORY_PATH)

if not os.path.exists(CONFIG_PATH):
    config = {"mode": "auto", "interval": 60, "device_list": []}
    with open(CONFIG_PATH, "w", encoding="utf-8") as f:
        json.dump(config, f)

logger = logging.getLogger()
logger.setLevel(logging.DEBUG)
handler = RotatingFileHandler(LOG_PATH, maxBytes=500000, backupCount=3, encoding="utf-8")
handler.setFormatter(
    logging.Formatter("%(asctime)s | %(name)s | %(levelname)s - %(message)s")
)
logger.addHandler(handler)


class OperationType(Enum):
    AUTO = 1
    MANUAL = 2


def get_ip_address():
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    sock.connect(("8.8.8.8", 80))
    return sock.getsockname()[0]


class SettingWindow(QtWidgets.QMainWindow):
    change_signal = QtCore.pyqtSignal()

    def __init__(self) -> None:
        super().__init__()

        self.setObjectName("SettingWindow")
        self.resize(220, 560)

        font = QtGui.QFont()
        font.setFamily("굴림")
        font.setPointSize(10)
        self.setFont(font)

        self.centralwidget = QtWidgets.QWidget(self)
        self.centralwidget.setObjectName("centralwidget")

        self.sync_label = QtWidgets.QLabel(self.centralwidget)
        self.sync_label.setGeometry(QtCore.QRect(40, 15, 100, 25))
        font = QtGui.QFont()
        font.setFamily("굴림")
        font.setPointSize(13)
        self.sync_label.setFont(font)
        self.sync_label.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.sync_label.setObjectName("sync_label")
        self.sync_interval_spin_box = QtWidgets.QSpinBox(self.centralwidget)
        self.sync_interval_spin_box.setGeometry(QtCore.QRect(35, 50, 95, 30))
        self.sync_interval_spin_box.setObjectName("sync_interval_spin_box")
        self.sync_interval_spin_box.setMinimum(1)
        self.sync_interval_spin_box.setMaximum(10080)
        self.min_label = QtWidgets.QLabel(self.centralwidget)
        self.min_label.setGeometry(QtCore.QRect(135, 50, 50, 30))
        self.min_label.setObjectName("min_label")

        self.mode_label = QtWidgets.QLabel(self.centralwidget)
        self.mode_label.setGeometry(QtCore.QRect(40, 115, 50, 25))
        font = QtGui.QFont()
        font.setFamily("굴림")
        font.setPointSize(13)
        self.mode_label.setFont(font)
        self.mode_label.setObjectName("mode_label")
        self.mode_button_group = QtWidgets.QButtonGroup(self)
        self.mode_button_group.setObjectName("mode_button_group")
        self.auto_radio_button = QtWidgets.QRadioButton(self.centralwidget)
        self.auto_radio_button.setGeometry(QtCore.QRect(30, 145, 80, 25))
        self.auto_radio_button.setObjectName("auto_radio_button")
        self.mode_button_group.addButton(self.auto_radio_button)
        self.manual_radio_button = QtWidgets.QRadioButton(self.centralwidget)
        self.manual_radio_button.setGeometry(QtCore.QRect(30, 175, 80, 25))
        self.manual_radio_button.setObjectName("manual_radio_button")
        self.mode_button_group.addButton(self.manual_radio_button)

        self.device_list_label = QtWidgets.QLabel(self.centralwidget)
        self.device_list_label.setGeometry(QtCore.QRect(40, 230, 110, 25))
        font = QtGui.QFont()
        font.setFamily("굴림")
        font.setPointSize(13)
        self.device_list_label.setFont(font)
        self.device_list_label.setObjectName("device_list_label")
        self.device_list_widget = QtWidgets.QListWidget(self.centralwidget)
        self.device_list_widget.setGeometry(QtCore.QRect(30, 260, 160, 190))
        self.device_list_widget.setObjectName("device_list_widget")
        self.device_list_add_button = QtWidgets.QPushButton(self.centralwidget)
        self.device_list_add_button.setGeometry(QtCore.QRect(165, 455, 25, 20))
        self.device_list_add_button.setObjectName("device_list_add_button")
        self.device_list_remove_button = QtWidgets.QPushButton(self.centralwidget)
        self.device_list_remove_button.setGeometry(QtCore.QRect(165, 475, 25, 20))
        self.device_list_remove_button.setObjectName("device_list_remove_button")
        self.new_device_line_edit = QtWidgets.QLineEdit(self.centralwidget)
        self.new_device_line_edit.setGeometry(QtCore.QRect(30, 460, 125, 30))
        self.new_device_line_edit.setText("")
        self.new_device_line_edit.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.new_device_line_edit.setObjectName("new_device_line_edit")

        self.save_button = QtWidgets.QPushButton(self.centralwidget)
        self.save_button.setGeometry(QtCore.QRect(10, 515, 90, 30))
        self.save_button.setObjectName("save_button")
        self.exit_button = QtWidgets.QPushButton(self.centralwidget)
        self.exit_button.setGeometry(QtCore.QRect(120, 515, 90, 30))
        self.exit_button.setObjectName("exit_button")
        self.setCentralWidget(self.centralwidget)

        _translate = QtCore.QCoreApplication.translate

        self.setWindowTitle(_translate("SettingWindow", "Setting"))

        self.sync_label.setText(_translate("SettingWindow", "Sync Interval"))
        self.min_label.setText(_translate("SettingWindow", "Minute"))

        self.mode_label.setText(_translate("SettingWindow", "Mode"))
        self.auto_radio_button.setText(_translate("SettingWindow", "Auto"))
        self.manual_radio_button.setText(_translate("SettingWindow", "Manual"))

        self.device_list_label.setText(_translate("SettingWindow", "Device List"))
        self.device_list_add_button.setText(_translate("MainWindow", "+"))
        self.device_list_remove_button.setText(_translate("MainWindow", "-"))

        self.save_button.setText(_translate("SettingWindow", "Save"))
        self.exit_button.setText(_translate("SettingWindow", "Exit"))

        QtCore.QMetaObject.connectSlotsByName(self)

        self._has_change = False
        self._initialize()

        self.save_button.clicked.connect(self._on_save)
        self.exit_button.clicked.connect(self._on_exit)
        self.device_list_add_button.clicked.connect(self._on_add_item)
        self.device_list_remove_button.clicked.connect(self._on_remove_item)

    def closeEvent(self, event):
        if self._has_change:
            self.change_signal.emit()
            self._has_change = False
            logger.debug("config has change. emit change signal")

    def _initialize(self):
        with open(CONFIG_PATH, "r", encoding="utf-8") as f:
            config = json.load(f)

        if (mode := config["mode"]) == OperationType.AUTO.value:
            self.auto_radio_button.setChecked(True)
        elif mode == OperationType.MANUAL.value:
            self.manual_radio_button.setChecked(True)
        else:
            self.auto_radio_button.setChecked(True)

        self.sync_interval_spin_box.setValue(config["interval"])

        for d in config["device_list"]:
            self.device_list_widget.addItem(QtWidgets.QListWidgetItem(d))

    def _on_exit(self):
        self.close()

    def _on_save(self):
        interval = self.sync_interval_spin_box.value()

        if self.auto_radio_button.isChecked():
            mode = OperationType.AUTO.value
        elif self.manual_radio_button.isChecked():
            mode = OperationType.MANUAL.value
        else:
            mode = OperationType.AUTO.value

        sync_device_list = []
        for index in range(self.device_list_widget.count()):
            sync_device_list.append(self.device_list_widget.item(index).text())
        sync_device_list = list(set(sync_device_list))

        config = {"interval": interval, "mode": mode, "device_list": sync_device_list}

        with open(CONFIG_PATH, "w", encoding="utf-8") as f:
            json.dump(config, f)

        self._has_change = True
        logger.debug(f"save change: {repr(config)}")

    def _on_add_item(self):
        new_device = self.new_device_line_edit.text()
        self.new_device_line_edit.clear()

        if new_device:
            self.device_list_widget.addItem(QtWidgets.QListWidgetItem(new_device))
            logger.debug(f"insert new device ip: {new_device}")

    def _on_remove_item(self):
        selected_device_indecies = self.device_list_widget.selectedIndexes()

        for index in selected_device_indecies:
            logger.debug(
                f"remove device: {self.device_list_widget.item(index.row()).text()}"
            )
            self.device_list_widget.model().removeRow(index.row())


class MainWindow(QtWidgets.QMainWindow):
    def __init__(self) -> None:
        super().__init__()

        self.setObjectName("MainWindow")
        self.resize(240, 270)

        self.centralwidget = QtWidgets.QWidget(self)
        self.centralwidget.setObjectName("centralwidget")
        self.button_exit = QtWidgets.QPushButton(self.centralwidget)
        self.button_exit.setGeometry(QtCore.QRect(60, 170, 120, 30))
        self.button_exit.setObjectName("button_exit")
        self.button_setting = QtWidgets.QPushButton(self.centralwidget)
        self.button_setting.setGeometry(QtCore.QRect(60, 120, 120, 30))
        self.button_setting.setObjectName("button_exit")
        self.label_sync_time = QtWidgets.QLabel(self.centralwidget)
        self.label_sync_time.setGeometry(QtCore.QRect(20, 30, 200, 30))
        self.label_sync_time.setText("")
        self.label_sync_time.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_sync_time.setObjectName("label_sync_time")
        self.setCentralWidget(self.centralwidget)

        self.tray_icon = QtWidgets.QSystemTrayIcon(self)
        self.tray_icon.setIcon(
            self.style().standardIcon(QtWidgets.QStyle.StandardPixmap.SP_ComputerIcon)
        )
        self.tray_icon.setToolTip("CRB Time Synchronizer")

        show_action = QtWidgets.QAction("Show", self)
        setting_action = QtWidgets.QAction("Setting", self)
        quit_action = QtWidgets.QAction("Exit", self)
        show_action.triggered.connect(self.show)
        setting_action.triggered.connect(self._on_open_setting)
        quit_action.triggered.connect(self._on_quit)

        tray_menu = QtWidgets.QMenu()
        tray_menu.addAction(show_action)
        tray_menu.addAction(setting_action)
        tray_menu.addAction(quit_action)
        self.tray_icon.setContextMenu(tray_menu)
        self.tray_icon.show()

        _translate = QtCore.QCoreApplication.translate
        self.setWindowTitle(_translate("MainWindow", "CRB Time Synchronizer"))
        self.button_exit.setText(_translate("MainWindow", "Exit"))
        self.button_setting.setText(_translate("MainWindow", "Setting"))
        QtCore.QMetaObject.connectSlotsByName(self)

        self.button_exit.clicked.connect(self._on_quit)
        self.button_setting.clicked.connect(self._on_open_setting)

        self._event_close = Event()

        self._device_list: typing.List[str] = []
        self._operation_mode = OperationType.AUTO.value
        self._sync_interval = 60

        self._device_search_worker = None
        self._time_sync_worker = None

        self._refresh_signal = None
        self._setting_window = None

        self._initialize()
        self._start()

    def _search_device(self):
        broadcast_sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        broadcast_sock.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, 1)
        broadcast_sock.settimeout(0.5)

        udp_sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        udp_sock.bind(("", 2119))
        udp_sock.settimeout(1)

        ip_address = get_ip_address()

        while not self._event_close.isSet():
            try:
                broadcast_sock.sendto(ip_address.encode("utf-8"), ("<broadcast>", 2118))
                data = udp_sock.recv(256)
            except socket.timeout:
                continue
            except Exception:
                logger.error("error in network", exc_info=True)

            ip, *_ = data.decode().split(";")
            if ip not in self._device_list:
                logger.info(f"new device: {ip}")
                self._device_list.append(ip)

        udp_sock.close()
        broadcast_sock.close()

    def _synchronize_time(self):
        udp_sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

        self._event_close.wait(timeout=3)
        while not self._event_close.isSet():
            for d in self._device_list:
                try:
                    udp_sock.sendto(
                        f"sync {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}".encode(
                            "utf-8"
                        ),
                        (d, 14050),
                    )
                except Exception:
                    logger.error(f"fail to sync: {d}", exc_info=True)
                else:
                    logger.info(f"sync: {d}")

            next_sync_time = datetime.now() + timedelta(minutes=self._sync_interval)
            self.label_sync_time.setText(
                f"Next Sync: {next_sync_time.strftime('%Y-%m-%d %H:%M:%S')}"
            )
            logger.info(
                f"next time sync: {next_sync_time.strftime('%Y-%m-%d %H:%M:%S')}"
            )
            self._event_close.wait(timeout=self._sync_interval * 60)

        udp_sock.close()

    def _on_quit(self):
        self._stop()

        app.quit()

    def _on_open_setting(self):
        self._setting_window = SettingWindow()
        self._refresh_signal = self._setting_window.change_signal
        self._refresh_signal.connect(self._refresh)

        self._setting_window.show()

    def _refresh(self):
        self.label_sync_time.setText("Refresh")

        self._stop()
        self._initialize()
        self._start()
        logger.debug("refreshing is done")

    def _initialize(self):
        with open(CONFIG_PATH, "r", encoding="utf-8") as f:
            config = json.load(f)

        self._operation_mode = config["mode"]
        self._sync_interval = config["interval"]
        self._device_list = config["device_list"]
        logger.debug(
            (
                f"init time synchronizer. mode: {self._operation_mode}, "
                f"interval: {self._sync_interval}, device list: {repr(self._device_list)}"
            )
        )

        if self._operation_mode == OperationType.AUTO.value:
            self._device_search_worker = Thread(target=self._search_device)
            logger.debug("operate auto mode")
        elif self._operation_mode == OperationType.MANUAL.value:
            logger.debug("operate manual mode")
        else:
            logger.warning(
                f"invalid operation mode({self._operation_mode}). run as auto mode"
            )
            self._device_search_worker = Thread(target=self._search_device)
        self._time_sync_worker = Thread(target=self._synchronize_time)

        self._event_close.clear()

    def _start(self):
        if self._device_search_worker is not None:
            self._device_search_worker.start()
        if self._time_sync_worker is not None:
            self._time_sync_worker.start()

    def _stop(self):
        self._event_close.set()

        if self._device_search_worker is not None:
            self._device_search_worker.join()
            self._device_search_worker = None
        if self._time_sync_worker is not None:
            self._time_sync_worker.join()
            self._time_sync_worker = None


if __name__ == "__main__":
    os.environ["QT_DEVICE_PIXEL_RATIO"] = "0"
    os.environ["QT_AUTO_SCREEN_SCALE_FACTOR"] = "1"
    os.environ["QT_SCREEN_SCALE_FACTORS"] = "1"
    os.environ["QT_SCALE_FACTOR"] = "1"

    app = QtWidgets.QApplication(sys.argv)
    app.setQuitOnLastWindowClosed(False)
    qdarktheme.setup_theme()

    font = QtGui.QFont()
    font.setFamily("굴림")
    font.setPointSize(10)
    app.setFont(font)

    main_window = MainWindow()
    main_window.show()

    sys.exit(app.exec_())
